#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testApp:server');
var http = require('http');
var pg = require('pg');
var conString = process.env.DATABASE_URL
console.log(process.env.STRIPE_API)
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var client = new pg.Client(conString);
client.connect();

var timerManagement = function(){
  interval = {}

  var someQuery = function(query, queryData, data, callbac){
    client.query(query, queryData, function(err, result){
      err ? console.log(err) : callbac(data, result.rows)
    })
  }

  this.updateTime = function(data){
    var query = "update test.matches set remaining_time = remaining_time - 1 where id = $1 returning remaining_time"
    var queryData = [data.match.id]
    console.log("counting down")
    someQuery(query, queryData, data, endTimer)
  }

  var endTimer = function(data, results){
    data.socketIO.to(data.streamer).emit('remainingTime', {remaining_time: results[0]['remaining_time']})
    if(results[0]['remaining_time'] == 0){
      var queryString = "update test.matches set remaining_time = 0, betting = false where id = $1 returning *"
      var queryData = [data.match.id]
      someQuery(queryString, queryData, data, closeBetting)
    }
  }

  var closeBetting = function(data, results){
    data.socketIO.to(data.streamer).emit('bettingClosed', results[0])
    clearInterval(interval[data.streamer]);
    delete interval[data.streamer]
  }
}

countDown = new timerManagement();

var generalQuery = function(emitName, query, queryData, socket, room, data, callback){
  client.query(query, queryData, function(err, result){
    err ? console.log(err) : callback(emitName, result.rows, socket, room, data)
  })
}

var updateRoom = function(emitName, queryResults, socket, room, data){
  socket.to(room).emit(emitName, queryResults)
}

var updateSelf = function(emitName, queryResults, socket, room, data){
  socket.emit(emitName, queryResults)
}

var streamView = io
  .of('/stream')
  .on('connection', function(socket){
    //General
    socket.on('leaveRoom', function(data){
      console.log('leaving room: ', data.streamer)
      socket.leave(data.streamer.username)
    })
    socket.on('getCurrentMatch', function(data){
      getCurrentMatch(data, socket)
    })
    socket.on('disconnect', function(data){
      console.log('disconnected from: ')
      //removeUser(socket)
    })
    socket.on('getOpenEvents', function(data){
      var emitName = "openEvents"
      var query = "select * from test.events where streamer_id = $1 and (closed = false or general = true) order by general desc";
      var queryData = [data.streamer.id]
      if(data.updateStatus == "self"){
        generalQuery(emitName, query, queryData, socket, false, data, updateSelf)
      }else{
        generalQuery(emitName, query, queryData, streamView, data.streamer.username, data, updateRoom)
      }
    })
    socket.on('getMatches', function(data){
      var emitName = 'matches'
      var query = "select tm.*, te.name from test.matches tm join test.events te on tm.event_id = te.id where tm.event_id = $1 order by tm.id desc limit 10"
      var queryData = [
        data.currentEvent.id
      ]
      if(data.updateStatus == "self"){
        generalQuery(emitName, query, queryData, socket, false, data, updateSelf)
      }else{
        generalQuery(emitName, query, queryData, streamView, data.streamer.username, data, updateRoom)
      }
    })
    socket.on('getParticipants', function(data){
      var emitName = "currentParticipants"
      var query = "select * from test.entries te join test.users tu on te.user_id = tu.id where te.event_id = $1 order by te.ante desc"
      var queryData = [data.currentEvent.id]
      if(data.updateStatus == "self"){
        generalQuery(emitName, query, queryData, socket, false, data, updateSelf)
      }else{
        generalQuery(emitName, query, queryData, streamView, data.streamer.username, data, updateSelf)
      }
    })
    socket.on('getCurrentBets', function(data){
      var query = "select b.*, u.username, u.email from test.bets b join test.users u on b.user_id = u.id where match_id = $1 order by b.id desc"
      var emitName = 'currentBets'
      var queryData = [
        data.currentMatch.id
      ]
      if(data.updateStatus == "self"){
        generalQuery(emitName, query, queryData, socket, false, data, updateSelf)
      }else{
        generalQuery(emitName, query, queryData, streamView, data.streamer.username, data, updateSelf)
      }
    })

    //User
    socket.on('getStreamInfo', function(data){
      socket.join(data.streamer)
      var query = "select * from test.users where username = $1"
      var queryData = [data.streamer]
      var emitName = "streamInfo"
      generalQuery(emitName, query, queryData, socket, false, data, updateSelf)
    })

    socket.on('getEventEntry', function(data){
      var query = "select * from test.entries where event_id = $1 and user_id = $2"
      var queryData = [
        data.currentEvent.id,
        data.user.id
      ]
      var emitName = "eventEntry"
      generalQuery(emitName, query, queryData, socket, false, data, updateSelf)
    })
    socket.on('addBet', function(data){
      var query = "insert into test.bets (match_id, player_id, amount, user_id) values ($1, $2, $3, $4) returning *"
      var queryData = [data.bet.match_id, data.bet.player, data.bet.amount, data.bet.user_id]
      var emitName = "bet"

      var removeMoneyFromAnte = function(){
        var query = "update test.entries set ante = ante - $1 where user_id = $2 and event_id = $3 returning *"
        var queryData = [data.bet.amount, data.bet.user_id, data.event.id]
        var emitName = "update"
        generalQuery(emitName, query, queryData, socket, false, data, updateSelf)
      }

      generalQuery(emitName, query, queryData, socket, false, data, removeMoneyFromAnte)
    })

    //Streamer
    socket.on('getConnection', function(data){
      socket.join(data.streamer.username)
      getCurrentEvent(data, socket)
    })
    socket.on('submitWinner', function(data){
      var query = "update test.matches set winner = $1, closed = true, playing = false where id = $2 returning *"
      var queryData =  [data.winner, data.currentMatch.id]
      var emitName = "showWinner"
      var updateAnte = function(emitName, queryResults, socket, room, data){
        socket.to(room).emit(emitName, queryResults)
        var query = "update test.entries set ante = (ante + ((select amount from test.bets where test.bets.match_id = $1 and test.bets.player_id = $2 and test.bets.user_id = test.entries.user_id) * 2)) where test.entries.user_id = any(CAST((select array_agg(b.user_id) from test.bets b where match_id = $1 and player_id = $2) as int[])) returning *";
        var queryData2 = [data.currentMatch.id, data.winner]
        var emitName2 = 'checkForEntryUpdates'
        generalQuery(emitName2, query, queryData2, socket, room, data, updateRoom)
      }
      generalQuery(emitName, query, queryData, streamView, data.stream_name, data, updateAnte)
    })

    socket.on('startPlaying', function(data){
      var query = "update test.matches set playing = true where id = $1 returning *"
      var queryData = [data.currentMatch.id]
      var emitName = "playingMatch"
      generalQuery(emitName, query, queryData, streamView, data.stream_name, data, updateRoom)
    })

    socket.on('sendNewMatch', function(data){
      var query = "insert into test.matches (players, remaining_time, streamer_id, event_id) values ($1, $2, $3, $4) returning *"
      var queryData = [data.players, data.remaining_time, data.streamer_id, data.event_id]
      var emitName = "startNewMatch"
      var startTimer = function(emitName, queryResults, socket, room, data){
        var gameObject = {
          match: queryResults[0],
          socketIO: socket,
          stream_name: data.stream_name,
          streamer: data.streamer
        }
        
        socket.to(room).emit(emitName, queryResults[0])
        if(typeof interval[data.streamer] !== 'undefined'){
          clearInterval(interval[data.streamer]);
        }
        data.socketIO = socket
        interval[data.streamer] = setInterval(countDown.updateTime, 1000, gameObject);
      }
      generalQuery(emitName, query, queryData, streamView, data.streamer, data, startTimer)
    })
  })
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
