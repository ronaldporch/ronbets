#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testApp:server');
var http = require('http');
var pg = require('pg');
var conString = "postgres://postgres:Blazeteam1@localhost/test"
//var conString = process.env.DATABASE_URL
console.log(conString)
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var client = new pg.Client(conString);
client.connect();

interval = {}

var countDown = function(data){
  console.log("counting down")
  console.log(interval)
  var queryString = "update test.matches set remaining_time = remaining_time - 1 where id = $1 returning remaining_time";
  client.query(queryString, [data.match.id], function(err, result){
    if(err){
      console.log(err);
    }else{
      data.socketIO.to(data.streamer).emit('remaining_time', {remaining_time: result.rows[0]['remaining_time']})
      if(result.rows[0]['remaining_time'] == 0){
        console.log("Ending Betting")
          var queryString = "update test.matches set remaining_time = 0, betting = false where id = $1 returning *"
          client.query(queryString, [data.match.id], function(err, result){
            if(err){
              console.log(err)
            }else{
              data.socketIO.to(data.streamer).emit('bettingClosed', result.rows[0])
              clearInterval(interval[data.streamer]);
              delete interval[data.streamer]
            }
          })
      }
    }
  })
}

var streamView = io
  .of('/stream')
  .on('connection', function(socket){
    socket.on('leaveRoom', function(data){
      console.log('leaving room: ', data.streamer)
      socket.leave(data.streamer.username)
    })
    socket.on('submitWinner', function(data){
      var queryString = "update test.matches set winner = $1, closed = true, playing = false where id = $2 returning *";
      console.log('match id: ', data.currentMatch.id)
      client.query(queryString, [data.winner, data.currentMatch.id], function(err, result){
        if(err){
          console.log(err)
        }else{
          streamView.to(data.stream_name).emit('showWinner', result.rows[0])
          var odds = ""
          if(data.winner == 1){
            odds = 2
          }else{
            odds = 1
          }
          var queryData = [data.currentMatch.id, data.winner, odds]
          if(true){
          var queryString = "update test.users set wallet = wallet + ((select amount from test.bets where match_id = $1 and player_id = $2 and user_id = test.users.id) * case when CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as integer) = 0 then 2 else (1 + CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as numeric)) end) where test.users.id = any(CAST((select betters from test.matches where id = $1) as int[])) returning *";
          }else{
          var queryString = "update test.entries set ante = ante + ((select amount from test.bets where test.bets.match_id = $1 and test.bets.player_id = $2 and test.bets.user_id = test.entries.user_id) * case when CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as integer) = 0 then 2 else (1 + CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as numeric)) end) from test.bets where test.bets.match_id = $1 and test.match.player_id = $2 and test.match.user_id = test.entries.user_id returning *";
          }
          client.query(queryString, queryData, function(err, result){
            if(err){
              console.log(err)
            }else{
            }
          })
        }
      })
    })
    socket.on('disconnect', function(data){
      console.log('disconnected from: ')
    })
    socket.on('startPlaying', function(data){
      var queryString = "update test.matches set playing = true where id = $1 returning *"
      client.query(queryString, [data.currentMatch.id], function(err, result){
        if(err){
          console.log(err)
        }else{
          streamView.to(data.stream_name).emit('playingMatch', result.rows[0])
        }
      })
    })
    socket.on('getStreamInfo', function(data){
      socket.join(data.streamer)
      var queryString = "select * from test.users where username = $1"
      client.query(queryString, [data.streamer], function(err, result){
        if(err){
          console.log(err);
        }else{
          socket.emit('sendStreamInfo', result.rows[0])
        }
      })
    })
      socket.on('getUserInfo', function(data){
      var queryString = "select * from test.users where id = $1"
      client.query(queryString, [data.user], function(err, result){
        if(err){
          console.log(err);
        }else{
          socket.emit('sendUserInfo', result.rows[0])
        }
      })
    })
    socket.on('getConnection', function(data){
      socket.join(data.user.username)
      var queryString = "select * from test.events where streamer_id = $1 and active = true"
      client.query(queryString, [data.user.id], function(err, result){
        if(err){
          console.log(err)
        }else{
          socket.emit('getCurrentEvent', {
            event: result.rows[0]
          })
          var event_id = result.rows[0] ? result.rows[0].id : 0
          var queryString = "select * from test.matches where streamer_id = $1 and event_id = $2 order by id desc limit 1"
          client.query(queryString, [data.user.id, event_id], function(err, result){
            if(err){
              console.log(err)
            }else{
              socket.emit('latestMatch', result.rows[0])
            }
          })
        }
      })
    })
    socket.on('sendNewMatch', function(data){
      var queryString = "insert into test.matches (players, game_id, remaining_time, streamer_id, event_id) values ($1, $2, $3, $4, $5) returning *"
      client.query(queryString, [data.players, 1, data.remaining_time, data.streamer_id, data.event_id], function(err, result){
        if(err){
          console.log(err)
        }else{
          var gameObject = {
            match: result.rows[0],
            socketIO: streamView,
            stream_name: data.stream_name,
            streamer: data.streamer
          }
          streamView.to(data.stream_name).emit('startNewMatch', result.rows[0])
          socket.emit('latestMatch', result.rows[0])
          
          if(typeof interval[data.streamer] !== 'undefined'){
            clearInterval(interval[data.streamer]);
          }
            data.socketIO = streamView
            //setBetCountDown(gameOb)
            interval[data.streamer] = setInterval(countDown, 1000, gameObject);
          }

      })
    })
    socket.on('message', function(data){
      console.log(data.streamer)
      streamView.to(data.streamer).emit('checkMessage',{
        message: data.message,
        rooms: socket.rooms
      })
    })
    socket.on('sendBet', function(data){
      var q = "update test.matches set betters = array_append(betters, $1) where id = $2 returning *"
      client.query(q, [data.bet.user_id, data.bet.match_id], function(err, result){
        if(err){
          console.log(err)
        }else{
          console.log(result.rows[0])
        }
      })
      var queryString = "insert into test.bets (match_id, player_id, amount, user_id) values ($1, $2, $3, $4) returning *"
      client.query(queryString, [data.bet.match_id, data.bet.player, data.bet.amount, data.bet.user_id], function(err, result){
        if(err){
          console.log(err)
        }else{
          socket.emit('yourBet', result.rows[0])
          var queryString = "select *, username from test.bets join test.users on test.bets.user_id = test.users.id where match_id = $1 order by test.bets.id desc"
          client.query(queryString, [data.bet.match_id], function(err, result){
            if(err){
              console.log(err)
            }else{
              streamView.to(data.streamer.username).emit('currentBets', result.rows)
              var queryData = [data.bet.amount, data.bet.user_id]
              if(data.event_id == 0){
                var queryString = "update test.users set wallet = wallet - $1 where id = $2 returning *"
              }else{
                var queryString = "update test.entries set ante = ante - $1 where user_id = $2 and event_id = $3 returning *"
                queryData.push(data.event_id)
              }
              client.query(queryString, queryData, function(err, result){
                if(err){
                  console.log(err)
                }else{
                  socket.emit('yourWallet', result.rows[0])
                }
              })
            }
          })
        }
      })
    })
    socket.on('getRecentMatch', function(data){
      var queryString = "select * from test.events where streamer_id = (select id from test.users where username = $1) and active = true"
      client.query(queryString, [data.streamer], function(err, result){
        socket.emit('getCurrentEvent', {
          event: result.rows[0]
        })
        var queryString = "select * from test.matches where streamer_id = (select id from test.users where username = $1) and event_id = $2 order by test.matches.id desc limit 1";
        var eventId = result.rows[0] ? result.rows[0].id : 0
        if(eventId){
          var q = "select ante from test.entries where event_id = $1 and user_id = $2"
          console.log(eventId)
          client.query(q, [eventId, data.user], function(err, result){
            if(err){
              console.log(err)
            }else{
              if(result.rows[0]){
                console.log(result.rows[0])
                socket.emit('currentEventWallet', {
                  inEvent: true,
                  ante: result.rows[0].ante
                })
              }else{
                socket.emit('currentEventWallet', {
                  inEvent: false
                })
              }
              
            }
          })
        }
        client.query(queryString, [data.streamer, eventId], function(err, result){
          if(err){
            console.log(err);
          }
          else{
            if(result.rows.length > 0){
              socket.emit('sendRecentMatch', result.rows[0])
              if(data.user){
                var queryString = "select * from test.bets where match_id = $1 and user_id = $2 order by id desc"
            client.query(queryString, [result.rows[0]['id'], data.user], function(err, result){
              if(err){
                console.log(err);
              }else{
                if(result.rows){
                  socket.emit('yourBet', result.rows[0])
                }else{

                }
              }
            })
              }

            var queryString = "select *, username from test.bets join test.users on test.bets.user_id = test.users.id where match_id = $1 order by test.bets.id desc"
            client.query(queryString, [result.rows[0]['id']], function(err, result){
              if(err){
                console.log(err);
              }else{
                socket.emit('currentBets', result.rows)
              }
            })
            }
          }
        })  
      })
    })
  })

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
