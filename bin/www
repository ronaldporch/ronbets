#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testApp:server');
var http = require('http');
var pg = require('pg');
//var conString = "postgres://postgres:Blazeteam1@localhost/test"
var conString = process.env.DATABASE_URL
console.log(conString)
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var client = new pg.Client(conString);
client.connect();

interval = {}

var countDown = function(data){
  var queryString = "update test.matches set remaining_time = remaining_time - 1 where id = $1 returning remaining_time";
  client.query(queryString, [data.match.id], function(err, result){
    if(err){
      console.log(err);
    }else{
      data.socketIO.to(data.streamer).emit('remainingTime', {remaining_time: result.rows[0]['remaining_time']})
      if(result.rows[0]['remaining_time'] == 0){
          var queryString = "update test.matches set remaining_time = 0, betting = false where id = $1 returning *"
          client.query(queryString, [data.match.id], function(err, result){
            if(err){
              console.log(err)
            }else{
              data.socketIO.to(data.streamer).emit('bettingClosed', result.rows[0])
              clearInterval(interval[data.streamer]);
              delete interval[data.streamer]
            }
          })
      }
    }
  })
}

var submitWinner = function(data, rooms){
  console.log("here")
  var queryString = "update test.matches set winner = $1, closed = true, playing = false where id = $2 returning *"
  var queryData = [data.winner, data.currentMatch.id]
  client.query(queryString, queryData, function(err, result){
    if(err){
      console.log(err)
    }else{
      var match = result.rows[0]
      rooms.to(data.stream_name).emit('showWinner', match)
      if(match.event_id == 0){
        updateUserWallet(data, rooms)
      }else{
        updateEntryAnte(data, rooms)
      }
    }
  })
}

var updateUserWallet = function(data, rooms){
  var odds = data.winner == 1 ? 2 : 1
  var queryString = "update test.users set wallet = wallet + ((select amount from test.bets where match_id = $1 and player_id = $2 and user_id = test.users.id) * case when CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as integer) = 0 then 2 else (1 + CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as numeric)) end) where test.users.id = any(CAST((select array_agg(b.user_id) from test.bets b where match_id = $1 and player_id = $2) as int[])) returning *";
  var queryData = [data.currentMatch.id, data.winner, odds]
  client.query(queryString, queryData, function(err, result){
    if(err){
      console.log(err)
    }else{
      rooms.to(data.stream_name).emit('checkForWalletUpdates')
      getUsers(data.stream_name, rooms)
    }
  })
}

var updateEntryAnte = function(data, rooms){
  var odds = data.winner == 1 ? 2 : 1
  var queryString = "update test.entries set ante = ante + ((select amount from test.bets where test.bets.match_id = $1 and test.bets.player_id = $2 and test.bets.user_id = test.entries.user_id) * case when CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as integer) = 0 then 2 else (1 + CAST((select players[$3] ->> 'odds' from test.matches where test.matches.id = $1) as numeric)) end) where test.entries.user_id = any(CAST((select array_agg(b.user_id) from test.bets b where match_id = $1 and player_id = $2) as int[])) returning *";
  var queryData = [data.currentMatch.id, data.winner, odds]
  client.query(queryString, queryData, function(err, result){
    if(err){
      console.log(err)
    }else{
      rooms.to(data.stream_name).emit('checkForEntryUpdates')
      getEventUsers(data.stream_name, rooms, data)
    }
  })
}

var startPlaying = function(data, rooms){
  var queryString = "update test.matches set playing = true where id = $1 returning *"
  client.query(queryString, [data.currentMatch.id], function(err, result){
    if(err){
      console.log(err)
     }else{
      var match = result.rows[0]
      rooms.to(data.stream_name).emit('playingMatch', match)
     }
  })
}

var streamInfo = function(data, socket){
  var queryString = "select * from test.users where username = $1"
  client.query(queryString, [data.streamer], function(err, result){
    if(err){
      console.log(err);
    }else{
      var streamer = result.rows[0]
      socket.emit('streamInfo', {
        streamer: streamer
      })
    }
  })
}

var userInfo = function(data, socket){
  var queryString = "select * from test.users where id = $1"
  client.query(queryString, [data.user], function(err, result){
    if(err){
      console.log(err);
    }else{
      var user = result.rows[0]
      socket.emit('sendUserInfo', user)
    }
  })
}

var addToBetters = function(data){
  var queryString = "update test.matches set betters = array_append(betters, $1) where id = $2 returning *"
  client.query(queryString, [data.bet.user_id, data.bet.match_id], function(err, result){
    if(err){
      console.log(err)
    }else{
      console.log(result.rows[0])
    }
  })
}

var removeMoneyFromWallet = function(data, socket){
  console.log("Removing money from my wallet")
  var queryString = "update test.users set wallet = wallet - $1 where id = $2 returning *"
  var queryData = [data.bet.amount, data.bet.user_id]
  client.query(queryString, queryData, function(err, result){
    if(err){
      console.log(err)
    }else{
      var user = result.rows[0]
      socket.emit('wallet', {
        user: user
      })
    }
  })
}

var removeMoneyFromAnte = function(data, socket){
  var queryString = "update test.entries set ante = ante - $1 where user_id = $2 and event_id = $3 returning *"
  var queryData = [data.bet.amount, data.bet.user_id, data.event.id]
  client.query(queryString, queryData, function(err, result){
    if(err){
      console.log(err)
    }else{
      var entry = result.rows[0]
      socket.emit('eventEntry', {
        entry: entry
      })
    }
  })
}

var currentBets = function(match_id, socket){
  var queryString = "select *, username from test.bets join test.users on test.bets.user_id = test.users.id where match_id = $1 order by test.bets.id desc"
  client.query(queryString, [match_id], function(err, result){
    if(err){
      console.log(err);
    }else{
      socket.emit('currentBets', result.rows)
    }
  })
}

var getEventEntry = function(data, socket){
  var queryString = "select * from test.entries where event_id = $1 and user_id = $2"
  client.query(queryString, [data.event.id, data.user.id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var entry = result.rows[0]
      socket.emit('eventEntry', {
        entry: entry
      })
    }
  })
}

var getWallet = function(data, socket){
  var queryString = "select * from test.users where id = $1"
  client.query(queryString, [data.user.id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var user = result.rows[0]
      socket.emit('wallet', {
        user: user
      })
    }
  })
}

var currentBetsToRoom = function(data, rooms){
  var queryString = "select b.*, u.username, u.email from test.bets b join test.users u on b.user_id = u.id where match_id = $1 order by b.id desc"
  client.query(queryString, [data.bet.match_id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var bets = result.rows
      rooms.to(data.streamer.username).emit('currentBets', {
        bets: bets
      })
    }
  })
}

var startNewMatch = function(data, rooms, socket){
  var queryString = "insert into test.matches (players, game_id, remaining_time, streamer_id, event_id) values ($1, $2, $3, $4, $5) returning *"
  client.query(queryString, [data.players, 1, data.remaining_time, data.streamer_id, data.event_id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var gameObject = {
        match: result.rows[0],
        socketIO: streamView,
        stream_name: data.stream_name,
        streamer: data.streamer
      }
      rooms.to(data.stream_name).emit('startNewMatch', result.rows[0])
      var match = result.rows[0]
      socket.emit('currentMatch', {
        match: match
      })
      
      if(typeof interval[data.streamer] !== 'undefined'){
        clearInterval(interval[data.streamer]);
      }
        data.socketIO = streamView
        interval[data.streamer] = setInterval(countDown, 1000, gameObject);
      }
  })
}

var getCurrentEvent = function(data, socket){
  var queryString = "select * from test.events where streamer_id = $1 and active = true"
  client.query(queryString, [data.streamer.id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var event;
      if(result.rows.length > 0){
        event = result.rows[0]
      }else{
        event = {
          name: "General Betting",
          id: 0
        }
      }
      socket.emit('currentEvent', {
        event: event
      })
    }
  })
}

var getCurrentMatch = function(data, socket){
  var queryString = "select * from test.matches where streamer_id = $1 and event_id = $2 order by id desc limit 1"
  client.query(queryString, [data.streamer.id, data.event.id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var match = result.rows[0]
      socket.emit('currentMatch', {
        match: match
      })
    }
  })
}

var updateParticipants = function(data, socket, rooms){
  var queryString = "update test.rooms set users = array_append(users, $1) where streamer_id = (select id from test.users where username = $2) returning *"
  client.query(queryString, [data.user.id, data.streamer], function(err, result){
    if(err){
      console.log(err)
    }else{
      //getUsers(data.streamer, rooms)
    }
  })
}

var getUsers = function(streamer, rooms){
  var queryString = "select * from test.users where (select users from test.rooms where streamer_id = (select id from test.users where username = $1)) @> ARRAY[id] order by wallet desc"
  client.query(queryString, [streamer], function(err, result){
    if(err){
      console.log(err)
    }else{
      var users = result.rows
      rooms.to(streamer).emit('currentUsers', {
        participants: users
      })
    }
  })
}

var getEventUsers = function(streamer, rooms, data){
  var queryString = "select * from test.entries te join test.users tu on te.user_id = tu.id where te.id = $1 order by te.ante desc"
  client.query(queryString, [data.event.id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var users = result.rows
      rooms.to(streamer).emit('currentEventUsers', {
        participants: users
      })
    }
  })
}

var removeUser = function(socket){
  var queryString = "update test.rooms set users = array_remove(users, (select id from test.users where username = $1)) where streamer_id = (select id from test.users where username = $2) returning *"
  client.query(queryString, [socket.username, socket.room], function(err, result){
    if(err){
      console.log(err)
    }else{
      var users = result.rows[0]
      socket.emit('currentUsers', {
        users: users
      })
    }
  })
}

var getCurrentBets = function(data, socket){
  var queryString = "select b.*, u.username, u.email from test.bets b join test.users u on b.user_id = u.id where match_id = $1 order by b.id desc"
  client.query(queryString, [data.match.id], function(err, result){
    if(err){
      console.log(err)
    }else{
      var bets = result.rows
      socket.emit('currentBets', {
        bets: bets
      })
    }
  })
}

var addBet = function(data, socket){
  var queryString = "insert into test.bets (match_id, player_id, amount, user_id) values ($1, $2, $3, $4) returning *"
  client.query(queryString, [data.bet.match_id, data.bet.player, data.bet.amount, data.bet.user_id], function(err, result){
    if(err){
      console.log(err)
    }else{
      if(data.event.id == 0){
        removeMoneyFromWallet(data, socket)
        getUsers(data.streamer.username, streamView)
      }else{
        removeMoneyFromAnte(data, socket)
        getEventUsers(data.streamer.username, streamView, data)
      }
      currentBetsToRoom(data, streamView)
    }
  })
}

var streamView = io
  .of('/stream')
  .on('connection', function(socket){
    socket.on('getStreamInfo', function(data){
      socket.username = data.user.username;
      socket.room = data.streamer;
      socket.join(data.streamer)
      streamInfo(data, socket)
      updateParticipants(data, socket, streamView)
    })
    socket.on('getConnection', function(data){
      socket.join(data.streamer.username)
      getCurrentEvent(data, socket)
    })
    socket.on('leaveRoom', function(data){
      console.log('leaving room: ', data.streamer)
      socket.leave(data.streamer.username)
    })
    socket.on('getCurrentMatch', function(data){
      getCurrentMatch(data, socket)
    })
    socket.on('getParticipants', function(data){
      getUsers(data.streamer, streamView)
    })
    socket.on('getEventParticipants', function(data){
      getEventUsers(data.streamer.username, streamView, data)
    })
    socket.on('submitWinner', function(data){
      submitWinner(data, streamView)
    })
    socket.on('getWallet', function(data){
      getWallet(data, socket)
    })
    socket.on('disconnect', function(data){
      console.log('disconnected from: ')
      removeUser(socket)
    })
    socket.on('getEventEntry', function(data){
      getEventEntry(data, socket)
    })
    socket.on('getCurrentBets', function(data){
      getCurrentBets(data, socket)
    })
    socket.on('startPlaying', function(data){
      startPlaying(data, streamView)
    })
    socket.on('getUserInfo', function(data){
      userInfo(data, socket)
    })
    socket.on('getCurrentEvent', function(data){
      getCurrentEvent(data, socket)
    })
    socket.on('sendNewMatch', function(data){
      startNewMatch(data, streamView, socket)
    })
    socket.on('sendBet', function(data){
      addToBetters(data)
      addBet(data, socket)
    })
  })

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
